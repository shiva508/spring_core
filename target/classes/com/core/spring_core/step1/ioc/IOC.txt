-->IoC is also known as dependency injection (DI)
-->It is a process whereby objects define their dependencies (that is, 
	the other objects they work with) only through constructor arguments,
	arguments to a factory method, or properties that are set on the object 
	instance after it is constructed or returned from a factory method. 
-->The container then injects those dependencies when it creates the bean. 
	This process is fundamentally the inverse (hence the name, Inversion of Control) 
	of the bean itself controlling the instantiation or location of its dependencies 
	by using direct construction of classes or a mechanism such as the Service Locator 
	pattern.
-->The org.springframework.beans and org.springframework.context packages are the basis 
	for Spring Framework’s IoC container. The BeanFactory interface provides an advanced 
	configuration mechanism capable of managing any type of object. ApplicationContext is 
	a sub-interface of BeanFactory. It adds:
	

    *Easier integration with Spring’s AOP features

    *Message resource handling (for use in internationalization)

    *Event publication

    *Application-layer specific contexts such as the WebApplicationContext for use in web 
    applications.
    
    
-->The BeanFactory provides the configuration framework and basic functionality.
-->The ApplicationContext adds more enterprise-specific functionality
-->A bean is an object that is instantiated, assembled, and managed by a Spring IoC container
1.2. Container Overview
-->The org.springframework.context.ApplicationContext interface represents 
	the Spring IoC container and is responsible for instantiating, configuring, 
	and assembling the beans.
-->The container gets its instructions on what objects to instantiate, configure, 
	and assemble by reading configuration metadata.
-->The configuration metadata is represented in XML, Java annotations, or Java code.
-->Several implementations of the ApplicationContext interface are supplied with Spring. 
	In stand-alone applications.
-->it is common to create an instance of 
	ClassPathXmlApplicationContext 
				or 
	FileSystemXmlApplicationContext. 
	
1.2.1. Configuration Metadata
-->the Spring IoC container consumes a form of configuration metadata. 
	This configuration metadata represents how you, as an application developer, 
	tell the Spring container to instantiate, configure, and assemble the objects in your 
	application.	
-->For information about using other forms of metadata with the Spring container, see:
-->Annotation-based configuration: Spring 2.5 introduced support for annotation-based 
	configuration metadata.
-->Java-based configuration: Starting with Spring 3.0, many features provided by the 
	Spring JavaConfig project became part of the core Spring Framework. Thus, you can 
	define beans external to your application classes by using Java rather than XML files. 
	To use these new features, see the @Configuration, @Bean, @Import, and @DependsOn annotations.
    
    

	